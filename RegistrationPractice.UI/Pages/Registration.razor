@page "/Registration"
@using System.Net
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using RegistrationPractice.UI.Services.Http
@using RegistrationPractice.WebApi.Contracts.Models
@inject IBackendApi BackendApi
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationState

<h3>Registration</h3>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>

        </Authorized>
        <NotAuthorized>
            <MudContainer>
                <MudForm Model="_request">
                    <MudGrid>
                        <MudItem xs="12" md="12">
                            <MudCard Elevation="10">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Регистрация</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                            </MudCard>
                            <MudTextField T="string"
                                          InputType="InputType.Email"
                                          @bind-Value="_request.Email"
                                          Label="Введите логин"
                                          Variant="Variant.Filled"/>
                            <MudTextField T="string"
                                          InputType="InputType.Password"
                                          @bind-Value="_request.Password"
                                          Label="Введите пароль"
                                          Variant="Variant.Filled"/>
                            <MudTextField T="string"
                                          InputType="InputType.Password"
                                          @bind-Value="_confirmPassword"
                                          Label="Повторите пароль"
                                          Variant="Variant.Filled"/>
                            <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary" OnClick="SignUp">
                                Войти
                            </MudButton>
                            <MudText Style="color: red" hidden="@_isLoginPassed">@_errorMessage</MudText>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudContainer>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await AuthenticationState.GetAuthenticationStateAsync();
        if (currentUser.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/home");
        }
    }

    private UserModel _request = new()
    {
        Email = "",
        Password = ""
    };

    private bool _isLoginPassed = true;
    private string _confirmPassword;
    private string _errorMessage;

    private async Task SignUp()
    {
        if (_request.Password != _confirmPassword)
        {
            _isLoginPassed = false;
            _errorMessage = "Passwords don't match! Try again.";
            return;
        }

        var response = await BackendApi.Register(_request);
        if (response.StatusCode == HttpStatusCode.InternalServerError)
        {
            _isLoginPassed = false;
            _errorMessage = "Пользователь с такими данными уже существует!";
            return;
        }

        _isLoginPassed = true;
        NavigationManager.NavigateTo("/login");
    }

}