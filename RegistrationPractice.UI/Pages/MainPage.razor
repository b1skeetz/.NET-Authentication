@page "/home"
@using System.Text.Json
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using RegistrationPractice.UI.Services.Http
@using RegistrationPractice.UI.Services.Security
@using RegistrationPractice.WebApi.Contracts.Models
@inject IBackendApi BackendApi
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationState
@inject ILocalStorageService LocalStorage
@attribute [Authorize]

<PageTitle>MainPage</PageTitle>
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h1>You are successfully authenticated</h1>

            <MudButton OnClick="Logout">Logout</MudButton>
        </Authorized>
        <NotAuthorized>
            <MudText Style="font-size: 20pt">403 Forbidden</MudText>
            <MudText Style="font-size: 20pt">You have to authenticate at first!</MudText>
            <MudLink Href="/login">Login</MudLink>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code{

    protected override async Task OnInitializedAsync()
    {
        await BackendApi.GetHomeAsync();
        /*var currentUser = await AuthenticationState.GetAuthenticationStateAsync();
        var user = await LocalStorage.GetItemAsStringAsync("user");
        if (user is not null)
        {
            var authentication = JsonSerializer.Deserialize<AuthenticationResponse>(user);
            if (!currentUser.User.Identity!.IsAuthenticated
                && authentication != null
                && authentication.UserName != ""
                && authentication.Token != "")
            {
                await BackendApi.RefreshToken(new RefreshTokenModel
                {
                    JwtToken = authentication.Token,
                    RefreshToken = authentication.RefreshToken
                });
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }*/
    }

    private async void Logout()
    {
        var user = await LocalStorage.GetItemAsStringAsync("user");
        var authentication = JsonSerializer.Deserialize<AuthenticationResponse>(user);
        if (authentication != null && authentication.UserName != "" && authentication.Token != "")
        {
            await LocalStorage.RemoveItemAsync("user");
        }

        NavigationManager.NavigateTo("/login");
    }


}